import os
from urllib.parse import quote_plus
from dotenv import load_dotenv

# üì• Chargement des variables d‚Äôenvironnement depuis .env (utile en local)
load_dotenv()

# ‚úÖ V√©rification des variables obligatoires
required_vars = ["DB_USER", "DB_PASSWORD", "DB_HOST", "DB_NAME"]
for var in required_vars:
    if not os.environ.get(var):
        raise RuntimeError(f"‚ùå Variable d'environnement manquante : {var}")

# üîê Encodage s√©curis√© du mot de passe MySQL
raw_password = os.environ["DB_PASSWORD"]
encoded_password = quote_plus(raw_password)

# üß™ Log optionnel pour v√©rifier le mot de passe encod√©
print("Mot de passe brut :", repr(raw_password))
print("Mot de passe encod√© :", encoded_password)

class Config:
    # üîí S√©curit√© des cookies
    SESSION_COOKIE_HTTPONLY = True

    # üîê Cl√©s secr√®tes Flask et CSRF
    SECRET_KEY = os.environ.get("FLASK_SECRET_KEY", "dev_key")
    WTF_CSRF_SECRET_KEY = os.environ.get("CSRF_SECRET_KEY", "csrf_dev_key")

    # üõ†Ô∏è Configuration SQLAlchemy avec mot de passe encod√©
    SQLALCHEMY_DATABASE_URI = (
        f"mysql+pymysql://{os.environ['DB_USER']}:{encoded_password}"
        f"@{os.environ['DB_HOST']}/{os.environ['DB_NAME']}"
    )
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # üìß Configuration de l'envoi d‚Äôe-mails
    MAIL_SERVER = 'smtp.gmail.com'
    MAIL_PORT = 587
    MAIL_USE_TLS = True
    MAIL_USERNAME = os.environ.get("MAIL_USERNAME")
    MAIL_PASSWORD = os.environ.get("MAIL_PASSWORD")
